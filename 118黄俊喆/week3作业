# coding:utf8

import torch
import torch.nn as nn
from torch.utils.data import DataLoader, TensorDataset
import numpy as np
import matplotlib.pyplot as plt

class MultiClassificationModel(nn.Module):
    def __init__(self, input_size):
        super(MultiClassificationModel, self).__init__()
        self.linear = nn.Linear(input_size, 5)  # 5类输出

    def forward(self, x):
        return self.linear(x)  # 直接返回线性层的输出

def build_sample():
    x = np.random.random(5)
    y = np.argmax(x)  # 获取最大值的索引
    return x, y

def build_dataset(total_sample_num):
    X, Y = zip(*(build_sample() for _ in range(total_sample_num)))
    return torch.FloatTensor(X), torch.LongTensor(Y)

def evaluate(model, loader):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for x, y in loader:
            y_pred = model(x)
            correct += (torch.argmax(y_pred, dim=1) == y).sum().item()
            total += y.size(0)
    accuracy = correct / total
    print(f"正确预测个数：{correct}, 正确率：{accuracy:.2f}")
    return accuracy

def main():
    epoch_num = 20
    batch_size = 20
    train_sample = 5000
    input_size = 5
    learning_rate = 0.001

    model = MultiClassificationModel(input_size)
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    loss_fn = nn.CrossEntropyLoss()

    train_x, train_y = build_dataset(train_sample)
    train_dataset = TensorDataset(train_x, train_y)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

    for epoch in range(epoch_num):
        model.train()
        epoch_loss = 0
        for x, y in train_loader:
            optim.zero_grad()
            y_pred = model(x)
            loss = loss_fn(y_pred, y)
            loss.backward()
            optim.step()
            epoch_loss += loss.item()

        avg_loss = epoch_loss / len(train_loader)
        print(f"第{epoch + 1}轮平均loss: {avg_loss:.3f}")
        evaluate(model, train_loader)

    torch.save(model.state_dict(), "model.pt")

if __name__ == "__main__":
    main()
